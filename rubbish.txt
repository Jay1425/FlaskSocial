
<!-- 
  FILE: app/templates/chat.html (NEW FILE)
  PURPOSE: The user interface and client-side logic for the chat room.
-->
{% extends "base.html" %}
{% block content %}
<div class="content-section">
    <h3 class="mb-4">Live Chat Room</h3>
    <div id="message-container" class="border p-3 mb-3" style="height: 400px; overflow-y: scroll;">
        <!-- Messages will be appended here -->
    </div>
    <form id="message-form">
        <div class="input-group">
            <input type="text" id="message-input" class="form-control" placeholder="Enter your message..." autocomplete="off">
            <button class="btn btn-info" type="submit">Send</button>
        </div>
    </form>
</div>

<script type="text/javascript" charset="utf-8">
    document.addEventListener('DOMContentLoaded', (event) => {
        // Establish a connection to the server
        var socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port);

        // This function is called when the connection is established
        socket.on('connect', function() {
            console.log('Websocket connected!');
        });

        // This function is called when a new message is received from the server
        socket.on('message_response', function(data) {
            const messageContainer = document.getElementById('message-container');
            const messageElement = document.createElement('div');
            
            // Style system messages differently
            if (data.username === 'System') {
                messageElement.innerHTML = `<em><small class="text-muted">${data.message}</small></em>`;
            } else {
                // Style user messages
                let username_style = 'fw-bold';
                // Highlight messages from the current user
                if (data.username === '{{ current_user.username }}') {
                    username_style += ' text-primary';
                }
                messageElement.innerHTML = `<strong class="${username_style}">${data.username}</strong>: ${data.message}`;
            }
            
            messageContainer.appendChild(messageElement);
            // Auto-scroll to the bottom
            messageContainer.scrollTop = messageContainer.scrollHeight;
        });

        // Handle form submission to send a message
        document.getElementById('message-form').onsubmit = function(e) {
            e.preventDefault();
            let messageInput = document.getElementById('message-input');
            let message = messageInput.value.trim();
            if (message) {
                // Send the message to the server as a JSON object
                socket.emit('json', {'message': message});
                messageInput.value = ''; // Clear the input field
            }
            messageInput.focus();
        };
    });
</script>
{% endblock content %}

<!-- 
  NOTE: The other HTML files (home.html, post.html, create_post.html, etc.)
  have no changes from the previous version.
-->
